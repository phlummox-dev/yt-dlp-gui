name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:

permissions:
  contents: write
  # ^ needed for creating releases

env:
  QT_QPA_PLATFORM: offscreen

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    runs-on: ${{ matrix.os }}


    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup uv ${{ matrix.runtime }}
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          enable-cache: true
          cache-suffix: ${{ matrix.runtime }}

      - name: Install zip on Windows
        if: runner.os == 'Windows'
        run: choco install zip -y

      - name: Install dependencies
        run: |
          uv sync --no-dev

      - name: generate metadata module
        shell: bash
        run: |
          # NB: on linux, this is done as part of make docker-build.
          # but no harm doing it twice.
          uv run ./scripts/generate_metadata.py

      - name: Build application windows
        if: runner.os == 'Windows'
        run: |
          uv run pyinstaller --clean -y yt-dlp-gui.spec

      - name: Build application ubuntu
        if: runner.os == 'Linux'
        run: |
          make docker-image-build
          make build-linux-exe

      - name: Build application macOS
        if: runner.os == 'macOS'
        run: |
          make build-exe

      - name: Upload artifact ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}-Build-${{ github.run_number }}
          path: ./dist/yt-dlp-gui

      - name: Zip the build
        shell: bash
        run: |
          cd dist
          zip -r yt-dlp-gui-${{ runner.os }}.zip yt-dlp-gui

      # for version tags only:

      - name: check that baked-in version matches git tag
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          expected_version="${GITHUB_REF#refs/tags/v}"

          found_version=$(uv run ./scripts/run.py --version | grep '^Version' | awk '{ print $2; }')

          if [[ "$expected_version" != "$found_version" ]]; then
            printf >&2 'Expected version "%s" differs from found version "%s" - aborting release\n' \
              "$expected_version" "$found_version"
            printf >&2 'Suggested fix: bump the version number in pyproject.toml\n'
            false
          fi


      - name: Create draft release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          name: "Version ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          draft: true
          prerelease: false
          files: |
            dist/yt-dlp-gui*.zip
          fail_on_unmatched_files: true
