name: CI/CD

# TODO: allow workflow dispatch to take parameters.
# e.g. whether to run tests, which platforms to build on.
on:
  push:
    branches:
      - master
    tags:
      - '*'
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  # ^ needed for creating releases

jobs:
  # TODO: we need tests!

  build:
    strategy:
      fail-fast: false
      matrix:
        # 'platform' is just a convenience name.
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup uv ${{ matrix.runtime }}
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          enable-cache: true
          cache-suffix: ${{ matrix.runtime }}

      - name: Install zip on Windows
        if: runner.os == 'Windows'
        run: choco install zip -y

      - name: Install dependencies
        run: |
          uv sync --no-dev

      - name: generate metadata module
        shell: bash
        run: |
          # NB: on linux, this is done as part of make docker-build.
          # but no harm doing it twice.
          uv run ./scripts/generate_metadata.py

      - name: extract version
        id: get_version
        shell: bash
        run: |
          found_version=$(uv run ./scripts/run.py --version | grep '^Version' | awk '{ print $2; }')
          echo "version=$found_version" >> "$GITHUB_OUTPUT"

      # windows build
      # builds an exe at dist/yt-dlp-gui.exe
      - name: Build application windows
        shell: bash
        if: runner.os == 'Windows'
        run: |
          set -x
          make build-exe
          version="${{ steps.get_version.outputs.version }}"
          mv dist/yt-dlp-gui.exe dist/yt-dlp-gui-"${version}"-win.exe

      # linux build
      # builds a "onedir" version - a dir at dist/yt-dlp-gui
      # TODO: cache/store the built docker image
      # TODO: bundle the directory up into an AppImage
      - name: Build application ubuntu
        if: runner.os == 'Linux'
        run: |
          set -x
          make docker-image-build
          make build-linux-exe
          version="${{ steps.get_version.outputs.version }}"
          cd dist
          zip -r yt-dlp-gui-"${version}"-linux.zip yt-dlp-gui

      # mac build
      # builds an app "bundle" dir, at dist/yt-dlp-gui.app
      # we zip it up into dist/yt-dlp-gui.app.zip
      - name: Build application macOS
        if: runner.os == 'macOS'
        run: |
          set -x
          make build-exe
          version="${{ steps.get_version.outputs.version }}"
          cd dist
          zip -r yt-dlp-gui-"${version}"-mac.zip yt-dlp-gui.app 

      - name: Upload artifact ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: yt-dlp-gui-${{ matrix.os }}-Build-${{ github.run_number }}
          path: |
            dist

      # for version tags only:

      - name: check that baked-in version matches git tag
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          expected_version="${GITHUB_REF#refs/tags/v}"

          found_version=$(uv run ./scripts/run.py --version | grep '^Version' | awk '{ print $2; }')

          if [[ "$expected_version" != "$found_version" ]]; then
            printf >&2 'Expected version "%s" differs from found version "%s" - aborting release\n' \
              "$expected_version" "$found_version"
            printf >&2 'Suggested fix: bump the version number in pyproject.toml\n'
            false
          fi


      - name: Create draft release - Windows binary
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          name: "Version ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          draft: true
          prerelease: false
          fail_on_unmatched_files: true
          files: dist/yt-dlp-gui*.exe
      
      - name: Create draft release - macOS app bundle
        if: runner.os == 'macOS'  && startsWith(github.ref, 'refs/tags/v') 
        uses: softprops/action-gh-release@v2
        with:
          name: "Version ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          draft: true
          prerelease: false
          fail_on_unmatched_files: true
          files: dist/yt-dlp-gui*.zip
      
      - name: Create draft release - Linux zip
        if: runner.os == 'Linux'  && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          name: "Version ${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          generate_release_notes: true
          draft: true
          prerelease: false
          files: |
            dist/yt-dlp-gui*.zip
          fail_on_unmatched_files: true

      
